version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: catelog
      POSTGRES_USER: catelog
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - catelog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catelog"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Storage
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - catelog-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build: .
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://catelog:${POSTGRES_PASSWORD}@postgres:5432/catelog
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: production
      CORS_ORIGINS: ${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - catelog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - catelog-network

  # Background Task Worker (Celery)
  worker:
    build: .
    restart: unless-stopped
    command: celery -A run.celery worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql://catelog:${POSTGRES_PASSWORD}@postgres:5432/catelog
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - catelog-network

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - catelog-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  catelog-network:
    driver: bridge